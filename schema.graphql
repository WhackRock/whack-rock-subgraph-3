"""
The WhackRock Fund Registry
"""
type Registry @entity(immutable: false) {
  id: ID! # Registry contract address
  allowedTokens: [AllowedToken!]! @derivedFrom(field: "registry")
  funds: [Fund!]! @derivedFrom(field: "registry")
  fundCount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

"""
Tokens allowed in the registry's global allowlist
"""
type AllowedToken @entity(immutable: false) {
  id: ID! # Registry address + token address
  registry: Registry!
  token: Bytes! # Token address
  isActive: Boolean! # True if currently allowed, false if removed
  addedAt: BigInt!
  removedAt: BigInt
  addedAtBlock: BigInt!
  removedAtBlock: BigInt
}

"""
Individual WhackRock Fund
"""
type Fund @entity(immutable: false) {
  id: ID! # Fund contract address
  registry: Registry!
  fundId: BigInt! # Sequential ID from registry
  address: Bytes! # Fund contract address
  creator: Bytes! # Address that originally created the fund (never changes)
  owner: Bytes! # Current owner of the fund (can change via ownership transfer)
  agent: Bytes! # Current agent managing the fund
  name: String! # ERC20 name
  symbol: String! # ERC20 symbol
  vaultURI: String! # Vault URI/metadata
  description: String! # Fund description
  
  # Fund configuration
  agentAumFeeWallet: Bytes!
  agentAumFeeBps: BigInt!
  
  # Allowed tokens for this fund
  allowedTokens: [FundToken!]! @derivedFrom(field: "fund")
  
  # NAV tracking
  navSnapshots: [FundNAVSnapshot!]! @derivedFrom(field: "fund")
  currentNAVInUSDC: BigInt!
  lastNAVUpdate: BigInt!
  lastWethValueInUSDC: BigInt! # Value of 1 WETH in USDC, updated by events
  
  # ERC20 data
  totalSupply: BigInt!
  
  # User positions
  positions: [UserFundPosition!]! @derivedFrom(field: "fund")
  
  # Timestamps
  createdAt: BigInt!
  createdAtBlock: BigInt!
  updatedAt: BigInt!
}

"""
Tokens allowed in individual funds with their target weights
"""
type FundToken @entity(immutable: false) {
  id: ID! # Fund address + token address
  fund: Fund!
  token: Bytes! # Token address
  name: String! # Token name from ERC20
  symbol: String! # Token symbol from ERC20
  targetWeight: BigInt! # Target weight in basis points (0-10000)
  isActive: Boolean! # True if currently part of the fund
  addedAt: BigInt!
  addedAtBlock: BigInt!
  updatedAt: BigInt!
}

"""
Hourly snapshots of fund NAV in USDC
"""
type FundNAVSnapshot @entity(immutable: true) {
  id: ID! # Fund address + hour timestamp
  fund: Fund!
  navInUSDC: BigInt! # Total NAV in USDC at this hour
  totalSupply: BigInt! # Total share supply at this time
  navPerShare: BigDecimal! # NAV per share (navInUSDC / totalSupply)
  timestamp: BigInt! # Timestamp rounded to the hour
  blockNumber: BigInt! # Block number of the snapshot
  
  # WETH price at the time of the snapshot
  wethValueInUSDC: BigInt! # Value of 1 WETH in USDC units
  
  # Source information
  triggeredBy: String! # What triggered this snapshot (deposit, withdrawal, fee, manual)
  transactionHash: Bytes! # Transaction that triggered the snapshot
}

"""
Agent information and changes
"""
type Agent @entity(immutable: false) {
  id: ID! # Agent address
  address: Bytes! # Agent address
  activeFundCount: BigInt!
  totalFundCount: BigInt!
  firstActiveAt: BigInt!
  lastActiveAt: BigInt!
}

"""
Global statistics
"""
type GlobalStats @entity(immutable: false) {
  id: ID! # Always "1"
  totalFunds: BigInt!
  totalRegistryAllowedTokens: BigInt!
  totalValueLockedUSDC: BigInt! # Sum of all fund NAVs
  lastUpdated: BigInt!
}

"""
Individual user tracking
"""
type User @entity(immutable: false) {
  id: ID! # User address
  address: Bytes!
  positions: [UserFundPosition!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "depositor")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "owner")
  totalDepositedUSDC: BigInt! # Total USDC value deposited across all funds
  totalWithdrawnUSDC: BigInt! # Total USDC value withdrawn across all funds
  firstActivityAt: BigInt!
  lastActivityAt: BigInt!
}

"""
User's position in a specific fund
"""
type UserFundPosition @entity(immutable: false) {
  id: ID! # User address + fund address
  user: User!
  fund: Fund!
  shareBalance: BigInt! # Current share balance
  totalDepositedWETH: BigInt! # Total WETH deposited by the user into this fund
  totalDepositedUSDC: BigInt! # Total USDC value of WETH deposited at the time of deposit
  totalWETHValueOfSharesWithdrawn: BigInt! # Total WETH value of shares withdrawn by the user from this fund
  totalUSDCValueOfSharesWithdrawn: BigInt! # Total USDC value of shares withdrawn at the time of withdrawal
  depositCount: BigInt! # Number of deposits
  withdrawalCount: BigInt! # Number of withdrawals
  firstDepositAt: BigInt
  lastActivityAt: BigInt!
  isActive: Boolean! # True if shareBalance > 0
}

"""
Individual deposit transaction
"""
type Deposit @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  fund: Fund!
  depositor: User! # User who deposited
  receiver: Bytes! # Address that received shares
  wethDeposited: BigInt! # Amount of WETH deposited
  sharesMinted: BigInt! # Amount of shares minted
  navBeforeDepositWETH: BigInt! # NAV in WETH before deposit
  totalSupplyBeforeDeposit: BigInt! # Total share supply before deposit
  wethValueInUSDC: BigInt! # Value of 1 WETH in USDC at time of deposit
  depositValueInUSDC: BigInt! # (wethDeposited * wethValueInUSDC) / 1e18
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Individual withdrawal transaction
"""
type Withdrawal @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  fund: Fund!
  owner: User! # User who owned the shares
  receiver: Bytes! # Address that received the assets
  sharesBurned: BigInt! # Amount of shares burned
  tokensWithdrawn: [Bytes!]! # Array of token addresses withdrawn
  amountsWithdrawn: [BigInt!]! # Array of token amounts withdrawn
  navBeforeWithdrawalWETH: BigInt! # NAV in WETH before withdrawal
  totalSupplyBeforeWithdrawal: BigInt! # Total supply before withdrawal
  totalWETHValueOfWithdrawal: BigInt! # Total WETH value of the assets withdrawn
  wethValueInUSDC: BigInt! # Value of 1 WETH in USDC at time of withdrawal
  withdrawalValueInUSDC: BigInt! # (totalWETHValueOfWithdrawal * wethValueInUSDC) / 1e18
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Rebalance cycle event
"""
type RebalanceCycle @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  fund: Fund!
  navBeforeRebalanceAA: BigInt! # NAV in WETH before rebalance
  navAfterRebalanceAA: BigInt! # NAV in WETH after rebalance
  wethValueInUSDC: BigInt! # Value of 1 WETH in USDC at time of rebalance
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
WhackRock Staking Contract
"""
type StakingContract @entity(immutable: false) {
  id: ID! # Contract address
  address: Bytes! # Contract address
  stakingToken: Bytes! # Address of the staking token
  totalStaked: BigInt! # Total amount staked across all users
  pointsRedeemer: Bytes # Address of the points redeemer contract
  stakes: [Stake!]! @derivedFrom(field: "contract")
  events: [StakeEvent!]! @derivedFrom(field: "contract")
  createdAt: BigInt!
  updatedAt: BigInt!
}

"""
Individual stake position
"""
type Stake @entity(immutable: false) {
  id: ID! # Contract address + user address
  contract: StakingContract!
  user: User!
  amount: BigInt! # Amount of tokens staked
  startTime: BigInt! # When the stake was created
  lockDuration: BigInt! # Duration of the lock period
  unlockTime: BigInt! # When tokens can be withdrawn
  multiplier: BigInt! # Points multiplier based on lock duration
  accumulatedPoints: BigInt! # Points earned but not yet claimed
  lastClaimTime: BigInt! # Last time points were calculated
  claimedPoints: BigInt! # Total points claimed by this user
  isActive: Boolean! # Whether the stake is still active
  createdAt: BigInt!
  updatedAt: BigInt!
}

"""
Base type for all staking events
"""
interface StakeEvent {
  id: ID!
  contract: StakingContract!
  user: User!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Stake event - when user stakes tokens
"""
type StakeEventStaked @entity(immutable: true) implements StakeEvent {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  user: User!
  amount: BigInt! # Amount staked in this transaction
  totalStakedAmount: BigInt! # User's total staked amount after this stake
  lockDuration: BigInt! # Lock duration in seconds
  unlockTime: BigInt! # When tokens can be withdrawn
  multiplier: BigInt! # Points multiplier
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Points claim event
"""
type PointsClaimEvent @entity(immutable: true) implements StakeEvent {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  user: User!
  points: BigInt! # Amount of points claimed
  totalClaimedPoints: BigInt! # User's total claimed points after this claim
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Withdrawal event
"""
type WithdrawalEvent @entity(immutable: true) implements StakeEvent {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  user: User!
  amount: BigInt! # Amount of tokens withdrawn
  points: BigInt! # Points claimed during withdrawal
  totalClaimedPoints: BigInt! # User's total claimed points after withdrawal
  stakeDuration: BigInt! # Total duration the tokens were staked
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Points redeemer set event
"""
type PointsRedeemerEvent @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  redeemer: Bytes! # Address of the new points redeemer
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Points redeemed event
"""
type PointsRedeemedEvent @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  user: User!
  redeemer: Bytes! # Address of the redeemer contract
  amount: BigInt! # Amount of points redeemed
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Timelock event
"""
type TimelockEvent @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  functionId: Bytes! # Function identifier
  executeTime: BigInt # When the function can be executed (null for executed/cancelled)
  eventType: String! # "queued", "executed", or "cancelled"
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

"""
Points accrued event
"""
type PointsAccruedEvent @entity(immutable: true) implements StakeEvent {
  id: ID! # Transaction hash + log index
  contract: StakingContract!
  user: User!
  points: BigInt! # Amount of points accrued
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
} 