// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AgentAumFeeCollected extends ethereum.Event {
  get params(): AgentAumFeeCollected__Params {
    return new AgentAumFeeCollected__Params(this);
  }
}

export class AgentAumFeeCollected__Params {
  _event: AgentAumFeeCollected;

  constructor(event: AgentAumFeeCollected) {
    this._event = event;
  }

  get agentFeeWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get agentSharesMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get protocolFeeRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get protocolSharesMinted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalFeeValueInAccountingAsset(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get navAtFeeCalculation(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSharesAtFeeCalculation(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get wethValueInUSDC(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class AgentUpdated extends ethereum.Event {
  get params(): AgentUpdated__Params {
    return new AgentUpdated__Params(this);
  }
}

export class AgentUpdated__Params {
  _event: AgentUpdated;

  constructor(event: AgentUpdated) {
    this._event = event;
  }

  get oldAgent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAgent(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BasketAssetsWithdrawn extends ethereum.Event {
  get params(): BasketAssetsWithdrawn__Params {
    return new BasketAssetsWithdrawn__Params(this);
  }
}

export class BasketAssetsWithdrawn__Params {
  _event: BasketAssetsWithdrawn;

  constructor(event: BasketAssetsWithdrawn) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharesBurned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensWithdrawn(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get amountsWithdrawn(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get navBeforeWithdrawalWETH(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSupplyBeforeWithdrawal(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalWETHValueOfWithdrawal(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get wethValueInUSDC(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class EmergencyWithdrawal extends ethereum.Event {
  get params(): EmergencyWithdrawal__Params {
    return new EmergencyWithdrawal__Params(this);
  }
}

export class EmergencyWithdrawal__Params {
  _event: EmergencyWithdrawal;

  constructor(event: EmergencyWithdrawal) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundTokenSwapped extends ethereum.Event {
  get params(): FundTokenSwapped__Params {
    return new FundTokenSwapped__Params(this);
  }
}

export class FundTokenSwapped__Params {
  _event: FundTokenSwapped;

  constructor(event: FundTokenSwapped) {
    this._event = event;
  }

  get tokenFrom(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountFrom(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountTo(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RebalanceCheck extends ethereum.Event {
  get params(): RebalanceCheck__Params {
    return new RebalanceCheck__Params(this);
  }
}

export class RebalanceCheck__Params {
  _event: RebalanceCheck;

  constructor(event: RebalanceCheck) {
    this._event = event;
  }

  get needsRebalance(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get maxDeviationBPS(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentNAV_AA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RebalanceCycleExecuted extends ethereum.Event {
  get params(): RebalanceCycleExecuted__Params {
    return new RebalanceCycleExecuted__Params(this);
  }
}

export class RebalanceCycleExecuted__Params {
  _event: RebalanceCycleExecuted;

  constructor(event: RebalanceCycleExecuted) {
    this._event = event;
  }

  get navBeforeRebalanceAA(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get navAfterRebalanceAA(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get wethValueInUSDC(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TargetWeightsUpdated extends ethereum.Event {
  get params(): TargetWeightsUpdated__Params {
    return new TargetWeightsUpdated__Params(this);
  }
}

export class TargetWeightsUpdated__Params {
  _event: TargetWeightsUpdated;

  constructor(event: TargetWeightsUpdated) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get weights(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WETHDepositedAndSharesMinted extends ethereum.Event {
  get params(): WETHDepositedAndSharesMinted__Params {
    return new WETHDepositedAndSharesMinted__Params(this);
  }
}

export class WETHDepositedAndSharesMinted__Params {
  _event: WETHDepositedAndSharesMinted;

  constructor(event: WETHDepositedAndSharesMinted) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get wethDeposited(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sharesMinted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get navBeforeDepositWETH(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalSupplyBeforeDeposit(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get wethValueInUSDC(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WhackRockFund extends ethereum.SmartContract {
  static bind(address: Address): WhackRockFund {
    return new WhackRockFund("WhackRockFund", address);
  }

  ACCOUNTING_ASSET(): Address {
    let result = super.call(
      "ACCOUNTING_ASSET",
      "ACCOUNTING_ASSET():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ACCOUNTING_ASSET(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ACCOUNTING_ASSET",
      "ACCOUNTING_ASSET():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AGENT_AUM_FEE_SHARE_BPS(): BigInt {
    let result = super.call(
      "AGENT_AUM_FEE_SHARE_BPS",
      "AGENT_AUM_FEE_SHARE_BPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_AGENT_AUM_FEE_SHARE_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AGENT_AUM_FEE_SHARE_BPS",
      "AGENT_AUM_FEE_SHARE_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_POOL_STABILITY(): boolean {
    let result = super.call(
      "DEFAULT_POOL_STABILITY",
      "DEFAULT_POOL_STABILITY():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_DEFAULT_POOL_STABILITY(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "DEFAULT_POOL_STABILITY",
      "DEFAULT_POOL_STABILITY():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  DEFAULT_SLIPPAGE_BPS(): BigInt {
    let result = super.call(
      "DEFAULT_SLIPPAGE_BPS",
      "DEFAULT_SLIPPAGE_BPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_SLIPPAGE_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_SLIPPAGE_BPS",
      "DEFAULT_SLIPPAGE_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROTOCOL_AUM_FEE_SHARE_BPS(): BigInt {
    let result = super.call(
      "PROTOCOL_AUM_FEE_SHARE_BPS",
      "PROTOCOL_AUM_FEE_SHARE_BPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PROTOCOL_AUM_FEE_SHARE_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROTOCOL_AUM_FEE_SHARE_BPS",
      "PROTOCOL_AUM_FEE_SHARE_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REBALANCE_DEVIATION_THRESHOLD_BPS(): BigInt {
    let result = super.call(
      "REBALANCE_DEVIATION_THRESHOLD_BPS",
      "REBALANCE_DEVIATION_THRESHOLD_BPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REBALANCE_DEVIATION_THRESHOLD_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REBALANCE_DEVIATION_THRESHOLD_BPS",
      "REBALANCE_DEVIATION_THRESHOLD_BPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SWAP_DEADLINE_OFFSET(): BigInt {
    let result = super.call(
      "SWAP_DEADLINE_OFFSET",
      "SWAP_DEADLINE_OFFSET():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SWAP_DEADLINE_OFFSET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SWAP_DEADLINE_OFFSET",
      "SWAP_DEADLINE_OFFSET():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_WEIGHT_BASIS_POINTS(): BigInt {
    let result = super.call(
      "TOTAL_WEIGHT_BASIS_POINTS",
      "TOTAL_WEIGHT_BASIS_POINTS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_TOTAL_WEIGHT_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_WEIGHT_BASIS_POINTS",
      "TOTAL_WEIGHT_BASIS_POINTS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC_ADDRESS(): Address {
    let result = super.call("USDC_ADDRESS", "USDC_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_USDC_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC_ADDRESS", "USDC_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  agent(): Address {
    let result = super.call("agent", "agent():(address)", []);

    return result[0].toAddress();
  }

  try_agent(): ethereum.CallResult<Address> {
    let result = super.tryCall("agent", "agent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  agentAumFeeBps(): BigInt {
    let result = super.call("agentAumFeeBps", "agentAumFeeBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_agentAumFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "agentAumFeeBps",
      "agentAumFeeBps():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  agentAumFeeWallet(): Address {
    let result = super.call(
      "agentAumFeeWallet",
      "agentAumFeeWallet():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_agentAumFeeWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "agentAumFeeWallet",
      "agentAumFeeWallet():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowedTokens(index: BigInt): Address {
    let result = super.call(
      "allowedTokens",
      "allowedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );

    return result[0].toAddress();
  }

  try_allowedTokens(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allowedTokens",
      "allowedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(amountWETHToDeposit: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountWETHToDeposit),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(
    amountWETHToDeposit: BigInt,
    receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountWETHToDeposit),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dexRouter(): Address {
    let result = super.call("dexRouter", "dexRouter():(address)", []);

    return result[0].toAddress();
  }

  try_dexRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("dexRouter", "dexRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAllowedTokenInternal(token: Address): boolean {
    let result = super.call(
      "isAllowedTokenInternal",
      "isAllowedTokenInternal(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBoolean();
  }

  try_isAllowedTokenInternal(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowedTokenInternal",
      "isAllowedTokenInternal(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAgentAumFeeCollectionTimestamp(): BigInt {
    let result = super.call(
      "lastAgentAumFeeCollectionTimestamp",
      "lastAgentAumFeeCollectionTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastAgentAumFeeCollectionTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastAgentAumFeeCollectionTimestamp",
      "lastAgentAumFeeCollectionTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolAumFeeRecipient(): Address {
    let result = super.call(
      "protocolAumFeeRecipient",
      "protocolAumFeeRecipient():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_protocolAumFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolAumFeeRecipient",
      "protocolAumFeeRecipient():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  targetWeights(token: Address): BigInt {
    let result = super.call(
      "targetWeights",
      "targetWeights(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_targetWeights(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetWeights",
      "targetWeights(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNAVInAccountingAsset(): BigInt {
    let result = super.call(
      "totalNAVInAccountingAsset",
      "totalNAVInAccountingAsset():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalNAVInAccountingAsset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNAVInAccountingAsset",
      "totalNAVInAccountingAsset():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNAVInUSDC(): BigInt {
    let result = super.call("totalNAVInUSDC", "totalNAVInUSDC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalNAVInUSDC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNAVInUSDC",
      "totalNAVInUSDC():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CollectAgentManagementFeeCall extends ethereum.Call {
  get inputs(): CollectAgentManagementFeeCall__Inputs {
    return new CollectAgentManagementFeeCall__Inputs(this);
  }

  get outputs(): CollectAgentManagementFeeCall__Outputs {
    return new CollectAgentManagementFeeCall__Outputs(this);
  }
}

export class CollectAgentManagementFeeCall__Inputs {
  _call: CollectAgentManagementFeeCall;

  constructor(call: CollectAgentManagementFeeCall) {
    this._call = call;
  }
}

export class CollectAgentManagementFeeCall__Outputs {
  _call: CollectAgentManagementFeeCall;

  constructor(call: CollectAgentManagementFeeCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amountWETHToDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get sharesMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawERC20Call extends ethereum.Call {
  get inputs(): EmergencyWithdrawERC20Call__Inputs {
    return new EmergencyWithdrawERC20Call__Inputs(this);
  }

  get outputs(): EmergencyWithdrawERC20Call__Outputs {
    return new EmergencyWithdrawERC20Call__Outputs(this);
  }
}

export class EmergencyWithdrawERC20Call__Inputs {
  _call: EmergencyWithdrawERC20Call;

  constructor(call: EmergencyWithdrawERC20Call) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmergencyWithdrawERC20Call__Outputs {
  _call: EmergencyWithdrawERC20Call;

  constructor(call: EmergencyWithdrawERC20Call) {
    this._call = call;
  }
}

export class EmergencyWithdrawNativeCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawNativeCall__Inputs {
    return new EmergencyWithdrawNativeCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawNativeCall__Outputs {
    return new EmergencyWithdrawNativeCall__Outputs(this);
  }
}

export class EmergencyWithdrawNativeCall__Inputs {
  _call: EmergencyWithdrawNativeCall;

  constructor(call: EmergencyWithdrawNativeCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmergencyWithdrawNativeCall__Outputs {
  _call: EmergencyWithdrawNativeCall;

  constructor(call: EmergencyWithdrawNativeCall) {
    this._call = call;
  }
}

export class SetAgentCall extends ethereum.Call {
  get inputs(): SetAgentCall__Inputs {
    return new SetAgentCall__Inputs(this);
  }

  get outputs(): SetAgentCall__Outputs {
    return new SetAgentCall__Outputs(this);
  }
}

export class SetAgentCall__Inputs {
  _call: SetAgentCall;

  constructor(call: SetAgentCall) {
    this._call = call;
  }

  get _newAgent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgentCall__Outputs {
  _call: SetAgentCall;

  constructor(call: SetAgentCall) {
    this._call = call;
  }
}

export class SetTargetWeightsCall extends ethereum.Call {
  get inputs(): SetTargetWeightsCall__Inputs {
    return new SetTargetWeightsCall__Inputs(this);
  }

  get outputs(): SetTargetWeightsCall__Outputs {
    return new SetTargetWeightsCall__Outputs(this);
  }
}

export class SetTargetWeightsCall__Inputs {
  _call: SetTargetWeightsCall;

  constructor(call: SetTargetWeightsCall) {
    this._call = call;
  }

  get _weights(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetTargetWeightsCall__Outputs {
  _call: SetTargetWeightsCall;

  constructor(call: SetTargetWeightsCall) {
    this._call = call;
  }
}

export class TriggerRebalanceCall extends ethereum.Call {
  get inputs(): TriggerRebalanceCall__Inputs {
    return new TriggerRebalanceCall__Inputs(this);
  }

  get outputs(): TriggerRebalanceCall__Outputs {
    return new TriggerRebalanceCall__Outputs(this);
  }
}

export class TriggerRebalanceCall__Inputs {
  _call: TriggerRebalanceCall;

  constructor(call: TriggerRebalanceCall) {
    this._call = call;
  }
}

export class TriggerRebalanceCall__Outputs {
  _call: TriggerRebalanceCall;

  constructor(call: TriggerRebalanceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get sharesToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
